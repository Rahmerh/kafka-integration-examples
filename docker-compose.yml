version: '3.9'
services:
  # Applications
  firestore-consumer:
    container_name: firestore-consumer
    build: ./nu.example.FirestoreConsumer/.
    image: firestoreconsumer:firestoreconsumer
    environment:
      FIRESTORE_EMULATOR_HOST: 'firebase-emulator:8080'
    networks:
      - 'kafka-example-network'
    depends_on:
      broker:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy

  firestore-producer:
    container_name: firestore-producer
    build: ./nu.example.FirestoreProducer/.
    image: firestoreproducer:firestoreproducer
    environment:
      FIRESTORE_EMULATOR_HOST: 'firebase-emulator:8080'
    networks:
      - 'kafka-example-network'
    depends_on:
      broker:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy

  duplicate-message-filter:
    container_name: duplicate-message-filter
    build: ./nu.example.DuplicateMessageFilter/.
    image: messagefilter:messagefilter
    networks:
      - 'kafka-example-network'
    depends_on:
      broker:
        condition: service_healthy
      cache:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy

  http-producer:
    container_name: http-producer
    build: ./nu.example.HttpProducer/.
    image: httpproducer:httpproducer
    networks:
      - 'kafka-example-network'
    ports:
      - '2100:80'
    depends_on:
      broker:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy

  # Kafka infra
  zookeeper:
    container_name: kafka-zookeeper
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SESSION_TIMEOUT_MS: 500000
      ZOOKEEPER_SASL_ENABLED: "false"
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 10s
      retries: 80
    networks:
      - 'kafka-example-network'

  broker:
    container_name: kafka-broker
    image: confluentinc/cp-server:latest
    hostname: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
      - '9101:9101'
      - '9093:9093'
      - '9094:9094'
      - '9095:9095'
    environment:
      KAFKA_LISTENERS: SASL_PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER_SASL_ENABLED: 'false'
      KAFKA_OPTS: '-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf'
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_PLAINTEXT
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_ENABLE: 'false'
    volumes:
      - ./Kafka/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
      - ./Kafka/data:/var/lib/kafka/data
    healthcheck:
      test: ['CMD', 'nc', '127.0.0.1', '9092']
      interval: 10s
      timeout: 10s
      retries: 80
    networks:
      - 'kafka-example-network'

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - 'kafka-example-network'
    depends_on:
      broker:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--output',
          '/dev/null',
          '--silent',
          '--head',
          '--fail',
          'http://kafka-schema-registry:8081/subjects',
        ]
      interval: 5s
      timeout: 10s
      retries: 30

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      broker:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy
    networks:
      - 'kafka-example-network'
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic users --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic users-filtered --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic bank-accounts --replication-factor 1 --partitions 1
      "
  # Misc infra
  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker:9092"
              schema-registry:
                url: "http://kafka-schema-registry:8081"

    ports:
      - 2000:8080
    networks:
      - 'kafka-example-network'
    depends_on:
      broker:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy

  firebase-emulator:
    container_name: firebase-emulator
    build: ./FirebaseEmulator
    hostname: firebase-emulator
    image: firebase-emulator:firebase-emulator
    volumes:
      - ./FirebaseEmulator:/app
      - ./FirebaseEmulator/Data:/data
    ports:
      # Firestore emulator port
      - 8080:8080
      # Firebase emulator UI port
      - 2001:5000
    networks:
      - 'kafka-example-network'

  cache:
    image: redis:latest
    hostname: cache
    container_name: cache
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass SUPER_SECRET_PASS
    volumes:
      - ./Cache/Data:/data
    networks:
      - 'kafka-example-network'
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 1s
      timeout: 3s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - '2002:8001'
    volumes:
      - ./Cache/RedisInsight:/db
    networks:
      - 'kafka-example-network'

networks:
  kafka-example-network:
    name: 'kafka-example-network'
