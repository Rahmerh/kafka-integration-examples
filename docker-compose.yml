version: '3.9'
services:
  # Applications
  firestore-consumer:
    container_name: firestore-consumer
    build: ./nu.example.FirestoreConsumer/.
    image: firestoreconsumer:firestoreconsumer
    environment:
      FIRESTORE_EMULATOR_HOST: 'firebase-emulator:8080'
    networks:
      - 'kafka-example-network'
    depends_on:
      connect:
        condition: service_healthy

  firestore-producer:
    container_name: firestore-producer
    build: ./nu.example.FirestoreProducer/.
    image: firestoreproducer:firestoreproducer
    environment:
      FIRESTORE_EMULATOR_HOST: 'firebase-emulator:8080'
    networks:
      - 'kafka-example-network'
    depends_on:
      connect:
        condition: service_healthy

  duplicate-message-filter:
    container_name: duplicate-message-filter
    build: ./nu.example.DuplicateMessageFilter/.
    image: messagefilter:messagefilter
    networks:
      - 'kafka-example-network'
    depends_on:
      connect:
        condition: service_healthy
      cache:
        condition: service_healthy

  # Kafka infra
  zookeeper:
    container_name: kafka-zookeeper
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SESSION_TIMEOUT_MS: 500000
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 10s
      retries: 80
    networks:
      - 'kafka-example-network'

  broker:
    container_name: kafka-broker
    image: confluentinc/cp-server:latest
    hostname: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
      - '9101:9101'
      - '9093:9093'
      - '9094:9094'
      - '9095:9095'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LINUX_EXTERNAL_HOST:PLAINTEXT,WINDOWS_EXTERNAL_HOST:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,LINUX_EXTERNAL_HOST://172.17.0.1:9093,WINDOWS_EXTERNAL_HOST://host.docker.internal:9094,LOCALHOST://localhost:9095
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    healthcheck:
      test: ['CMD', 'nc', '127.0.0.1', '9092']
      interval: 10s
      timeout: 10s
      retries: 80
    networks:
      - 'kafka-example-network'

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - 'kafka-example-network'
    depends_on:
      broker:
        condition: service_healthy

  connect:
    container_name: kafka-connect
    image: confluentinc/cp-kafka-connect:latest
    hostname: connect
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - '8083:8083'
      - '8180:8180'
      - '8181:8181'
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.0.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: 'io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor'
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: 'io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    healthcheck:
      test: ['CMD', 'nc', '127.0.0.1', '8083']
      interval: 10s
      timeout: 10s
      retries: 80
    networks:
      - 'kafka-example-network'

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      connect:
        condition: service_healthy
    networks:
      - 'kafka-example-network'
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic users --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic users-filtered --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic bank-accounts --replication-factor 1 --partitions 1
      "
  # Misc infra
  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker:9092"
              schema-registry:
                url: "http://kafka-schema-registry:8081"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - 2000:8080
    networks:
      - 'kafka-example-network'
    depends_on:
      connect:
        condition: service_healthy

  firebase-emulator:
    container_name: firebase-emulator
    build: ./FirebaseEmulator
    hostname: firebase-emulator
    image: firebase-emulator:firebase-emulator
    volumes:
      - ./FirebaseEmulator:/app
      - ./FirebaseEmulator/Data:/data
    ports:
      # Firestore emulator port
      - 8080:8080
      # Firebase emulator UI port
      - 2001:5000
    networks:
      - 'kafka-example-network'

  cache:
    image: redis:latest
    hostname: cache
    container_name: cache
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass SUPER_SECRET_PASS
    volumes:
      - ./Cache/Data:/data
    networks:
      - 'kafka-example-network'
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 1s
      timeout: 3s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - '2002:8001'
    volumes:
      - ./Cache/RedisInsight:/db
    networks:
      - 'kafka-example-network'

networks:
  kafka-example-network:
    name: 'kafka-example-network'
